ID:16
ExeStack:
str filename;
filename=file.in;
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
str filename;
filename=file.in;
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
filename=file.in;
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> 
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
filename=file.in;
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> 
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> file.in
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
OpenFile(filename,r);
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> file.in
Out:
FileTable:
Heap:
{}

ID:16
ExeStack:
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
int number;
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 0
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
ReadFile(filename,number);
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 0
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
ref(str) closeFilename;
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (0,str)
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
new(closeFilename,file.in);
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (0,str)
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{}

ID:16
ExeStack:
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (1,str)
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{1=file.in}

ID:16
ExeStack:
CloseFile(*(closeFilename));
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (1,str)
Out:
FileTable:
file.in:java.io.BufferedReader@53bd815b
Heap:
{1=file.in}

ID:16
ExeStack:
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in}

ID:16
ExeStack:
ref(int) num;
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in}

ID:16
ExeStack:
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (0,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in}

ID:16
ExeStack:
new(num,number);
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (0,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in}

ID:16
ExeStack:
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:16
ExeStack:
if (fork()==0){ while (*(num)>0) {(print(*(num));*(num)=*(num)-1) }};
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:16
ExeStack:
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:16
ExeStack:
bool boolean;
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:16
ExeStack:
if (boolean) then (print(boolean)) else (nop));
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
boolean --> false
closeFilename --> (1,str)
Out:
FileTable:
Heap:
{1=file.in, 2=16}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
FileTable:
Heap:
{1=file.in, 2=16}

ID:16
ExeStack:
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
boolean --> false
closeFilename --> (1,str)
Out:
16
FileTable:
Heap:
{1=file.in, 2=16}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
FileTable:
Heap:
{1=file.in, 2=15}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
FileTable:
Heap:
{1=file.in, 2=15}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
FileTable:
Heap:
{1=file.in, 2=15}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
FileTable:
Heap:
{1=file.in, 2=15}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
FileTable:
Heap:
{1=file.in, 2=14}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
FileTable:
Heap:
{1=file.in, 2=14}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
FileTable:
Heap:
{1=file.in, 2=14}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
FileTable:
Heap:
{1=file.in, 2=14}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
FileTable:
Heap:
{1=file.in, 2=13}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
FileTable:
Heap:
{1=file.in, 2=13}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
FileTable:
Heap:
{1=file.in, 2=13}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
FileTable:
Heap:
{1=file.in, 2=13}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
FileTable:
Heap:
{1=file.in, 2=12}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
FileTable:
Heap:
{1=file.in, 2=12}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
FileTable:
Heap:
{1=file.in, 2=12}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
FileTable:
Heap:
{1=file.in, 2=12}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
FileTable:
Heap:
{1=file.in, 2=11}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
FileTable:
Heap:
{1=file.in, 2=11}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
FileTable:
Heap:
{1=file.in, 2=11}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
FileTable:
Heap:
{1=file.in, 2=11}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
FileTable:
Heap:
{1=file.in, 2=10}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
FileTable:
Heap:
{1=file.in, 2=10}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
FileTable:
Heap:
{1=file.in, 2=10}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
FileTable:
Heap:
{1=file.in, 2=10}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
FileTable:
Heap:
{1=file.in, 2=9}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
FileTable:
Heap:
{1=file.in, 2=9}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
FileTable:
Heap:
{1=file.in, 2=9}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
FileTable:
Heap:
{1=file.in, 2=9}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
FileTable:
Heap:
{1=file.in, 2=8}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
FileTable:
Heap:
{1=file.in, 2=8}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
FileTable:
Heap:
{1=file.in, 2=8}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
FileTable:
Heap:
{1=file.in, 2=8}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
FileTable:
Heap:
{1=file.in, 2=7}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
FileTable:
Heap:
{1=file.in, 2=7}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
FileTable:
Heap:
{1=file.in, 2=7}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
FileTable:
Heap:
{1=file.in, 2=7}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
FileTable:
Heap:
{1=file.in, 2=6}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
FileTable:
Heap:
{1=file.in, 2=6}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
FileTable:
Heap:
{1=file.in, 2=6}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
FileTable:
Heap:
{1=file.in, 2=6}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
FileTable:
Heap:
{1=file.in, 2=5}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
FileTable:
Heap:
{1=file.in, 2=5}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
FileTable:
Heap:
{1=file.in, 2=5}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
FileTable:
Heap:
{1=file.in, 2=5}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
FileTable:
Heap:
{1=file.in, 2=4}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
FileTable:
Heap:
{1=file.in, 2=4}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
FileTable:
Heap:
{1=file.in, 2=4}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
FileTable:
Heap:
{1=file.in, 2=4}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
FileTable:
Heap:
{1=file.in, 2=3}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
FileTable:
Heap:
{1=file.in, 2=3}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
FileTable:
Heap:
{1=file.in, 2=3}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
FileTable:
Heap:
{1=file.in, 2=3}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
FileTable:
Heap:
{1=file.in, 2=2}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
FileTable:
Heap:
{1=file.in, 2=2}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
FileTable:
Heap:
{1=file.in, 2=2}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
FileTable:
Heap:
{1=file.in, 2=2}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
FileTable:
Heap:
{1=file.in, 2=1}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
FileTable:
Heap:
{1=file.in, 2=1}

ID:28
ExeStack:
print(*(num));
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
FileTable:
Heap:
{1=file.in, 2=1}

ID:28
ExeStack:
*(num)=*(num)-1;
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
FileTable:
Heap:
{1=file.in, 2=1}

ID:28
ExeStack:
while (*(num)>0) {(print(*(num));*(num)=*(num)-1) };
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
FileTable:
Heap:
{1=file.in, 2=0}

ID:28
ExeStack:
SymTable:
number --> 16
filename --> file.in
num --> (2,int)
closeFilename --> (1,str)
Out:
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
FileTable:
Heap:
{1=file.in, 2=0}

