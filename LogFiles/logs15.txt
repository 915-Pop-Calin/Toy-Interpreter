ID:15
ExeStack:
str v;
v=test.in;
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
str v;
v=test.in;
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
v=test.in;
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
v --> 
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
v=test.in;
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
v --> 
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
v --> test.in
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
if (fork()==0){ (str u;(u=test.in;OpenFile(u,r)))};
OpenFile(v,r);
SymTable:
v --> test.in
Out:
FileTable:
Heap:
{}

ID:27
ExeStack:
str u;
u=test.in;
OpenFile(u,r);
SymTable:
v --> test.in
Out:
FileTable:
Heap:
{}

ID:15
ExeStack:
OpenFile(v,r);
SymTable:
v --> test.in
Out:
FileTable:
Heap:
{}

ID:27
ExeStack:
str u;
u=test.in;
OpenFile(u,r);
SymTable:
v --> test.in
Out:
FileTable:
test.in:java.io.BufferedReader@182decdb
Heap:
{}

ID:15
ExeStack:
SymTable:
v --> test.in
Out:
FileTable:
test.in:java.io.BufferedReader@182decdb
Heap:
{}

ID:27
ExeStack:
u=test.in;
OpenFile(u,r);
SymTable:
u --> 
v --> test.in
Out:
FileTable:
test.in:java.io.BufferedReader@182decdb
Heap:
{}

ID:27
ExeStack:
u=test.in;
OpenFile(u,r);
SymTable:
u --> 
v --> test.in
Out:
FileTable:
test.in:java.io.BufferedReader@182decdb
Heap:
{}

ID:27
ExeStack:
OpenFile(u,r);
SymTable:
u --> test.in
v --> test.in
Out:
FileTable:
test.in:java.io.BufferedReader@182decdb
Heap:
{}

model.exceptions.AlreadyOpenedFileException: test.in has already been opened
