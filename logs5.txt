ExeStack:
str file1;
file1=test.in;
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
Out:
FileTable:
Heap:
{}

ExeStack:
str file1;
file1=test.in;
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
Out:
FileTable:
Heap:
{}

ExeStack:
file1=test.in;
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> 
Out:
FileTable:
Heap:
{}

ExeStack:
file1=test.in;
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> 
Out:
FileTable:
Heap:
{}

ExeStack:
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
Out:
FileTable:
Heap:
{}

ExeStack:
str file2;
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
Out:
FileTable:
Heap:
{}

ExeStack:
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
file2 --> 
Out:
FileTable:
Heap:
{}

ExeStack:
file2=test.in;
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
file2 --> 
Out:
FileTable:
Heap:
{}

ExeStack:
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
file2 --> test.in
Out:
FileTable:
Heap:
{}

ExeStack:
OpenFile(file1,r);
OpenFile(file2,r);
SymTable:
file1 --> test.in
file2 --> test.in
Out:
FileTable:
Heap:
{}

ExeStack:
OpenFile(file2,r);
SymTable:
file1 --> test.in
file2 --> test.in
Out:
FileTable:
test.in --> java.io.BufferedReader@61e4705b
Heap:
{}

test.in has already been opened
